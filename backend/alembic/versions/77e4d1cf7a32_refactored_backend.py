"""refactored backend

Revision ID: 77e4d1cf7a32
Revises: e2261d374520
Create Date: 2025-07-19 17:44:35.429365

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '77e4d1cf7a32'
down_revision = 'e2261d374520'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('idx_cash_flow_statements_symbol_date'), table_name='cash_flow_statements')
    op.drop_index(op.f('ix_cash_flow_statements_date'), table_name='cash_flow_statements')
    op.drop_index(op.f('ix_cash_flow_statements_id'), table_name='cash_flow_statements')
    op.drop_index(op.f('ix_cash_flow_statements_symbol'), table_name='cash_flow_statements')
    op.drop_table('cash_flow_statements')
    op.drop_index(op.f('ix_model_performance_evaluation_date'), table_name='model_performance')
    op.drop_index(op.f('ix_model_performance_id'), table_name='model_performance')
    op.drop_table('model_performance')
    op.drop_index(op.f('idx_news_published_sentiment'), table_name='news_articles')
    op.drop_index(op.f('ix_news_articles_id'), table_name='news_articles')
    op.drop_index(op.f('ix_news_articles_published_date'), table_name='news_articles')
    op.drop_table('news_articles')
    op.drop_index(op.f('idx_revenue_segments_symbol_date'), table_name='revenue_segments')
    op.drop_index(op.f('ix_revenue_segments_date'), table_name='revenue_segments')
    op.drop_index(op.f('ix_revenue_segments_id'), table_name='revenue_segments')
    op.drop_index(op.f('ix_revenue_segments_symbol'), table_name='revenue_segments')
    op.drop_table('revenue_segments')
    op.drop_index(op.f('idx_predictions_symbol_date'), table_name='ml_predictions')
    op.drop_index(op.f('ix_ml_predictions_id'), table_name='ml_predictions')
    op.drop_index(op.f('ix_ml_predictions_prediction_date'), table_name='ml_predictions')
    op.drop_index(op.f('ix_ml_predictions_symbol'), table_name='ml_predictions')
    op.drop_table('ml_predictions')
    op.drop_index(op.f('idx_balance_sheet_statements_symbol_date'), table_name='balance_sheet_statements')
    op.drop_index(op.f('ix_balance_sheet_statements_date'), table_name='balance_sheet_statements')
    op.drop_index(op.f('ix_balance_sheet_statements_id'), table_name='balance_sheet_statements')
    op.drop_index(op.f('ix_balance_sheet_statements_symbol'), table_name='balance_sheet_statements')
    op.drop_table('balance_sheet_statements')
    op.add_column('companies', sa.Column('company_name', sa.String(length=200), nullable=True))
    op.add_column('companies', sa.Column('full_time_employees', sa.String(length=20), nullable=True))
    op.add_column('companies', sa.Column('ceo', sa.String(length=200), nullable=True))
    op.add_column('companies', sa.Column('price', sa.Numeric(precision=10, scale=2), nullable=True))
    op.add_column('companies', sa.Column('beta', sa.Numeric(precision=6, scale=4), nullable=True))
    op.add_column('companies', sa.Column('volume', sa.Numeric(precision=15, scale=0), nullable=True))
    op.add_column('companies', sa.Column('average_volume', sa.Numeric(precision=15, scale=0), nullable=True))
    op.add_column('companies', sa.Column('range_52_week', sa.String(length=50), nullable=True))
    op.add_column('companies', sa.Column('last_dividend', sa.Numeric(precision=8, scale=4), nullable=True))
    op.add_column('companies', sa.Column('is_actively_trading', sa.Boolean(), nullable=True))
    op.alter_column('companies', 'country',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=50),
               existing_nullable=True)
    op.alter_column('companies', 'market_cap',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               type_=sa.Numeric(precision=18, scale=2),
               existing_nullable=True)
    op.drop_column('companies', 'name')
    op.add_column('income_statements', sa.Column('research_and_development_expenses', sa.Numeric(precision=18, scale=2), nullable=True))
    op.add_column('income_statements', sa.Column('selling_general_and_administrative_expenses', sa.Numeric(precision=18, scale=2), nullable=True))
    op.add_column('income_statements', sa.Column('operating_expenses', sa.Numeric(precision=18, scale=2), nullable=True))
    op.add_column('income_statements', sa.Column('operating_income', sa.Numeric(precision=18, scale=2), nullable=True))
    op.add_column('income_statements', sa.Column('income_before_tax', sa.Numeric(precision=18, scale=2), nullable=True))
    op.add_column('income_statements', sa.Column('income_tax_expense', sa.Numeric(precision=18, scale=2), nullable=True))
    op.add_column('income_statements', sa.Column('eps_diluted', sa.Numeric(precision=8, scale=4), nullable=True))
    op.add_column('income_statements', sa.Column('weighted_average_shs_out', sa.Numeric(precision=15, scale=0), nullable=True))
    op.add_column('income_statements', sa.Column('weighted_average_shs_out_dil', sa.Numeric(precision=15, scale=0), nullable=True))
    op.add_column('income_statements', sa.Column('ebitda', sa.Numeric(precision=18, scale=2), nullable=True))
    op.add_column('income_statements', sa.Column('ebit', sa.Numeric(precision=18, scale=2), nullable=True))
    op.add_column('income_statements', sa.Column('depreciation_and_amortization', sa.Numeric(precision=18, scale=2), nullable=True))
    op.add_column('income_statements', sa.Column('reported_currency', sa.String(length=3), nullable=True))
    op.add_column('income_statements', sa.Column('created_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('income_statements', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('income_statements', 'company_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('income_statements', 'revenue',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               type_=sa.Numeric(precision=18, scale=2),
               existing_nullable=True)
    op.alter_column('income_statements', 'cost_of_revenue',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               type_=sa.Numeric(precision=18, scale=2),
               existing_nullable=True)
    op.alter_column('income_statements', 'gross_profit',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               type_=sa.Numeric(precision=18, scale=2),
               existing_nullable=True)
    op.alter_column('income_statements', 'net_income',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               type_=sa.Numeric(precision=18, scale=2),
               existing_nullable=True)
    op.alter_column('income_statements', 'eps',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               type_=sa.Numeric(precision=8, scale=4),
               existing_nullable=True)
    op.drop_constraint(op.f('_symbol_date_period_uc'), 'income_statements', type_='unique')
    op.drop_index(op.f('idx_income_statements_symbol_date'), table_name='income_statements')
    op.create_unique_constraint('_symbol_date_period_uc_income', 'income_statements', ['symbol', 'date', 'period'])
    op.create_index('idx_income_symbol_fiscal_year', 'income_statements', ['symbol', 'fiscal_year'], unique=False)
    op.create_index(op.f('ix_income_statements_company_id'), 'income_statements', ['company_id'], unique=False)
    op.drop_column('income_statements', 'epsdiluted')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('income_statements', sa.Column('epsdiluted', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_income_statements_company_id'), table_name='income_statements')
    op.drop_index('idx_income_symbol_fiscal_year', table_name='income_statements')
    op.drop_constraint('_symbol_date_period_uc_income', 'income_statements', type_='unique')
    op.create_index(op.f('idx_income_statements_symbol_date'), 'income_statements', ['symbol', 'date'], unique=False)
    op.create_unique_constraint(op.f('_symbol_date_period_uc'), 'income_statements', ['symbol', 'date', 'period'], postgresql_nulls_not_distinct=False)
    op.alter_column('income_statements', 'eps',
               existing_type=sa.Numeric(precision=8, scale=4),
               type_=sa.DOUBLE_PRECISION(precision=53),
               existing_nullable=True)
    op.alter_column('income_statements', 'net_income',
               existing_type=sa.Numeric(precision=18, scale=2),
               type_=sa.DOUBLE_PRECISION(precision=53),
               existing_nullable=True)
    op.alter_column('income_statements', 'gross_profit',
               existing_type=sa.Numeric(precision=18, scale=2),
               type_=sa.DOUBLE_PRECISION(precision=53),
               existing_nullable=True)
    op.alter_column('income_statements', 'cost_of_revenue',
               existing_type=sa.Numeric(precision=18, scale=2),
               type_=sa.DOUBLE_PRECISION(precision=53),
               existing_nullable=True)
    op.alter_column('income_statements', 'revenue',
               existing_type=sa.Numeric(precision=18, scale=2),
               type_=sa.DOUBLE_PRECISION(precision=53),
               existing_nullable=True)
    op.alter_column('income_statements', 'company_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_column('income_statements', 'updated_at')
    op.drop_column('income_statements', 'created_at')
    op.drop_column('income_statements', 'reported_currency')
    op.drop_column('income_statements', 'depreciation_and_amortization')
    op.drop_column('income_statements', 'ebit')
    op.drop_column('income_statements', 'ebitda')
    op.drop_column('income_statements', 'weighted_average_shs_out_dil')
    op.drop_column('income_statements', 'weighted_average_shs_out')
    op.drop_column('income_statements', 'eps_diluted')
    op.drop_column('income_statements', 'income_tax_expense')
    op.drop_column('income_statements', 'income_before_tax')
    op.drop_column('income_statements', 'operating_income')
    op.drop_column('income_statements', 'operating_expenses')
    op.drop_column('income_statements', 'selling_general_and_administrative_expenses')
    op.drop_column('income_statements', 'research_and_development_expenses')
    op.add_column('companies', sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.alter_column('companies', 'market_cap',
               existing_type=sa.Numeric(precision=18, scale=2),
               type_=sa.DOUBLE_PRECISION(precision=53),
               existing_nullable=True)
    op.alter_column('companies', 'country',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=100),
               existing_nullable=True)
    op.drop_column('companies', 'is_actively_trading')
    op.drop_column('companies', 'last_dividend')
    op.drop_column('companies', 'range_52_week')
    op.drop_column('companies', 'average_volume')
    op.drop_column('companies', 'volume')
    op.drop_column('companies', 'beta')
    op.drop_column('companies', 'price')
    op.drop_column('companies', 'ceo')
    op.drop_column('companies', 'full_time_employees')
    op.drop_column('companies', 'company_name')
    op.create_table('balance_sheet_statements',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('symbol', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('period', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('total_assets', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('total_liabilities', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('total_stockholders_equity', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('fiscal_year', sa.VARCHAR(length=4), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name=op.f('balance_sheet_statements_company_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('balance_sheet_statements_pkey')),
    sa.UniqueConstraint('symbol', 'date', 'period', name=op.f('_symbol_date_period_uc_balance'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_balance_sheet_statements_symbol'), 'balance_sheet_statements', ['symbol'], unique=False)
    op.create_index(op.f('ix_balance_sheet_statements_id'), 'balance_sheet_statements', ['id'], unique=False)
    op.create_index(op.f('ix_balance_sheet_statements_date'), 'balance_sheet_statements', ['date'], unique=False)
    op.create_index(op.f('idx_balance_sheet_statements_symbol_date'), 'balance_sheet_statements', ['symbol', 'date'], unique=False)
    op.create_table('ml_predictions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('symbol', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('model_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('model_version', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('target_metric', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('prediction_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('prediction_period', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('prediction_year', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('predicted_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('confidence_interval_lower', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('confidence_interval_upper', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('confidence_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('training_rmse', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('training_mape', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('training_r2', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('actual_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('prediction_error', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('absolute_percentage_error', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('training_data_points', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('features_used', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('model_parameters', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name=op.f('ml_predictions_company_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('ml_predictions_pkey'))
    )
    op.create_index(op.f('ix_ml_predictions_symbol'), 'ml_predictions', ['symbol'], unique=False)
    op.create_index(op.f('ix_ml_predictions_prediction_date'), 'ml_predictions', ['prediction_date'], unique=False)
    op.create_index(op.f('ix_ml_predictions_id'), 'ml_predictions', ['id'], unique=False)
    op.create_index(op.f('idx_predictions_symbol_date'), 'ml_predictions', ['symbol', 'prediction_date'], unique=False)
    op.create_table('revenue_segments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('symbol', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('period', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('segment_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('segment_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('segment_revenue', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('segment_percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('segment_growth_yoy', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('segment_growth_qoq', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('fiscal_Year', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name=op.f('revenue_segments_company_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('revenue_segments_pkey')),
    sa.UniqueConstraint('symbol', 'date', 'segment_name', name=op.f('uq_revenue_segment'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_revenue_segments_symbol'), 'revenue_segments', ['symbol'], unique=False)
    op.create_index(op.f('ix_revenue_segments_id'), 'revenue_segments', ['id'], unique=False)
    op.create_index(op.f('ix_revenue_segments_date'), 'revenue_segments', ['date'], unique=False)
    op.create_index(op.f('idx_revenue_segments_symbol_date'), 'revenue_segments', ['symbol', 'date'], unique=False)
    op.create_table('news_articles',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('url', sa.VARCHAR(length=1000), autoincrement=False, nullable=False),
    sa.Column('published_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('author', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('source', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('snippet', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('sentiment_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('sentiment_label', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('relevance_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('mentioned_symbols', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('is_processed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('processing_error', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('news_articles_pkey')),
    sa.UniqueConstraint('url', name=op.f('news_articles_url_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_news_articles_published_date'), 'news_articles', ['published_date'], unique=False)
    op.create_index(op.f('ix_news_articles_id'), 'news_articles', ['id'], unique=False)
    op.create_index(op.f('idx_news_published_sentiment'), 'news_articles', ['published_date', 'sentiment_score'], unique=False)
    op.create_table('model_performance',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('model_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('model_version', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('target_metric', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('evaluation_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('evaluation_period_start', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('evaluation_period_end', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('rmse', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('mape', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('mae', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('r2_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('predictions_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('rank_by_rmse', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('rank_by_mape', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_best_model', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('companies_evaluated', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('model_performance_pkey'))
    )
    op.create_index(op.f('ix_model_performance_id'), 'model_performance', ['id'], unique=False)
    op.create_index(op.f('ix_model_performance_evaluation_date'), 'model_performance', ['evaluation_date'], unique=False)
    op.create_table('cash_flow_statements',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('symbol', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('period', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('net_cash_provided_by_operating_activities', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('net_cash_used_for_investing_activities', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('net_cash_used_by_financing_activities', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('fiscal_year', sa.VARCHAR(length=4), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name=op.f('cash_flow_statements_company_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('cash_flow_statements_pkey')),
    sa.UniqueConstraint('symbol', 'date', 'period', name=op.f('_symbol_date_period_uc_cash'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_cash_flow_statements_symbol'), 'cash_flow_statements', ['symbol'], unique=False)
    op.create_index(op.f('ix_cash_flow_statements_id'), 'cash_flow_statements', ['id'], unique=False)
    op.create_index(op.f('ix_cash_flow_statements_date'), 'cash_flow_statements', ['date'], unique=False)
    op.create_index(op.f('idx_cash_flow_statements_symbol_date'), 'cash_flow_statements', ['symbol', 'date'], unique=False)
    # ### end Alembic commands ###